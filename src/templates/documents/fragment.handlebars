{{!--
    Leaving external mixins out of fragments because it overcomplicates things.  
    Because "mixin on BaseType, Foo, Bar" basically defines a multi-parent interface
    mixins=(resolveMixins fields)

    We can't use FragmentSelectionSet as atters, so we have to settle for Mixins,
    which means no `copyWith`
--}}
{{#*inline "fragmentMixin" ~}}
{{ multilineComment description }}
/// See [{{ className }}SelectionSet] for the full stand-alone class
@JsonSerializable(createFactory: false)
mixin {{className}} {{
  classExtends
    onMixin="true"
    baseType=typeName
    mixins=(resolveMixins fields)
    fragments=fragmentsSpread
}} {
  static final String schemaTypeName = "{{ typeName }}";

  @JsonKey(name: r'__typename', required: false, disallowNullValue: true)
  String get {{dartName @root.config.typenameField}};

  {{> selectionSet this dupeQualifier='get' }}

  static {{concat className 'SelectionSet'}} fromJson(Map<String, dynamic> json) =>
    {{concat className 'SelectionSet'}}.fromJson(json);

}

{{!-- don't need to pass fields in because we're extending the mixin --}}
/// Materialized class that implements the fragment [{{ className }}]
///
/// Gives access to all the usual selection set helpers
{{> selectionSetClass
      className=(concat className 'SelectionSet')
      typeName=typeName
      fragmentsSpread=(arrayify className)
      inlineFragments=inlineFragments
      fields=''
      allFields=(hackFragmentFields "get" fragments=fragmentsSpread fields=fields)
      selectionSetOf=className
}}
{{~/inline~}}

{{~# if (hackFragmentFields "ensure_unique" name=name) ~}}

{{!-- add all fragment fields to the field hacker --}}
    {{~ hackFragmentFields "add" name=name
        fields=fields
        nestedFragments=fragmentsSpread 
        contextModels=innerModels
    ~}}
{{!-- --}}

{{~#eachBackwards innerModels }}

{{~#unless (
  ignoreType
    (concat (toPascalCase ../name) modelType)
      @root.config.replaceTypes
      schemaBaseType
      @root.config.irreducibleTypes
)}}

{{> selectionSetClass
      className=(concat (toPascalCase ../name) modelType)
      typeName=schemaBaseType
      fields=fields
      fragmentsSpread=fragmentsSpread
      inlineFragments=inlineFragments
      allFields=(hackFragmentFields "get" fragments=fragmentsSpread fields=fields)
      contextModels=../innerModels
      contextName=(toPascalCase ../name)
}}

{{~/unless}}

{{/eachBackwards~}}

{{> fragmentMixin
      className=(toPascalCase name)
      typeName=onType
      fields=(hackFragmentFields 'get' fragments=fragmentsSpread fields=fields)
      fragmentsSpread=fragmentsSpread
      inlineFragments=inlineFragments
      contextModels=innerModels
      contextName=(toPascalCase name)
}}

{{~/if~}}
